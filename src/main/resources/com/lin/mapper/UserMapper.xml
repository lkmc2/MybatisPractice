<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lin.mapper.UserMapper">

    <!--返回值用户类映射关系Map-->
    <resultMap id="userMap" type="com.lin.model.SysUser">
        <id property="id" column="id"/>
        <result property="userName" column="user_name"/>
        <result property="userPassword" column="user_password"/>
        <result property="userEmail" column="user_email"/>
        <result property="userInfo" column="user_info"/>
        <result property="headImg" column="head_img" jdbcType="BLOB"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!--用户角色映射Map-->
    <resultMap id="userRoleMap" extends="userMap" type="com.lin.model.SysUser">
        <!--使用association标签表示一对一关系，让user的成员变量role与角色表自动关联，columnPrefix是前缀-->
        <!--直接使用roleMap作为返回值，可复用代码-->
        <association property="role" columnPrefix="role_" resultMap="com.lin.mapper.RoleMapper.roleMap"/>
    </resultMap>

    <!--role变量中的其他值是根据主查询中的role_id作为RoleMapper.selectRoleById方法的参数来求出的-->
    <resultMap id="userRoleMapSelect" extends="userMap" type="com.lin.model.SysUser">
        <association property="role" column="{id=role_id}"
                     select="com.lin.mapper.RoleMapper.selectRoleById"/>
    </resultMap>

    <select id="selectById" resultMap="userMap">
        select * from sys_user where id = #{id}
    </select>

    <!--如果不使用resultMap，就要为每个表字段设置与实体类中一样的别名-->
    <select id="selectAll" resultType="com.lin.model.SysUser">
        select
            user_name userName,
            user_password userPassword,
            user_email userEmail,
            user_info userInfo,
            head_img headImg,
            create_time createTime
        from sys_user
    </select>

    <select id="selectRolesByUserId" resultType="com.lin.model.SysRole">
        select
          r.id,
          r.role_name roleName,
          r.enabled,
          r.create_by createBy,
          r.create_time createTime
        from sys_user u
            inner join sys_user_role ur on u.id = ur.user_id
            inner join sys_role r on ur.role_id = r.id
        where u.id = #{userId}
    </select>

    <select id="selectRolesAndUserNameByUserId" resultType="com.lin.model.SysRoleExtend">
        select
            r.id,
            r.role_name roleName,
            r.enabled,
            r.create_by createBy,
            r.create_time createTime,
            u.user_name userName
        from sys_user u
             inner join sys_user_role ur on u.id = ur.user_id
             inner join sys_role r on ur.role_id = r.id
        where u.id = #{userId}
    </select>

    <!--u.user_name as "user.userName"是把该字段赋值给类中的user属性的userName字段-->
    <select id="selectRolesAndUserNameByUserId2" resultType="com.lin.model.SysRole">

        select
            r.id,
            r.role_name roleName,
            r.enabled,
            r.create_by createBy,
            r.create_time createTime,
            u.user_name as "user.userName",
            u.user_email as "user.userEmail"
        from sys_user u
             inner join sys_user_role ur on u.id = ur.user_id
             inner join sys_role r on ur.role_id = r.id
        where u.id = #{userId}
    </select>

    <insert id="insert">
        insert into sys_user (
              id, user_name, user_password,
              user_email, user_info,
              head_img, create_time
        )
        values (
             #{id}, #{userName}, #{userPassword},
             #{userEmail}, #{userInfo},
             #{headImg, jdbcType=BLOB},#{createTime, jdbcType=TIMESTAMP}
         )
    </insert>

    <!--配置useGeneratedKeys为true，会把数据库的主键的值设置到keyProperty指定的id属性上-->
    <insert id="insert2" useGeneratedKeys="true" keyProperty="id">
        insert into sys_user (
            user_name, user_password,
            <if test="userEmail != null and userEmail !=''">
                user_email,
            </if>
            user_info,
            head_img, create_time
        )
        values (
           #{userName}, #{userPassword},
           <if test="userEmail != null and userEmail !=''">
                #{userEmail},
           </if>
          #{userInfo},
           #{headImg, jdbcType=BLOB},#{createTime, jdbcType=TIMESTAMP}
        )
    </insert>

    <!--配置useGeneratedKeys为true，会把数据库的主键的值设置到keyProperty指定的id属性上-->
    <!--因为mysql中insert成功之后才能获取到主键值，所以order是after-->
    <!--select LAST_INSERT_ID() 获取上一次插入的ID，每个数据库使用的函数都不一样-->
    <insert id="insert3">
        insert into sys_user (
            user_name, user_password,
            user_email, user_info,
            head_img, create_time
        )
        values (
           #{userName}, #{userPassword},
           #{userEmail}, #{userInfo},
           #{headImg, jdbcType=BLOB},#{createTime, jdbcType=TIMESTAMP}
       )
       <selectKey keyColumn="id" resultType="long" keyProperty="id" order="AFTER">
           select LAST_INSERT_ID()
       </selectKey>
    </insert>

    <update id="updateById">
        update sys_user
        set user_name = #{userName},
            user_password = #{userPassword},
            user_email = #{userEmail},
            user_info = #{userInfo},
            head_img = #{headImg, jdbcType=BLOB},
            create_time = #{createTime, jdbcType=TIMESTAMP}
        where id = #{id}
    </update>

    <delete id="deleteById">
        delete from sys_user where id = #{id}
    </delete>

    <select id="selectRolesByUserIdAndRoleEnabled" resultType="com.lin.model.SysRole">
        select
            r.id,
            r.role_name roleName,
            r.enabled,
            r.create_by createBy,
            r.create_time createTime
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
        where u.id = #{userId} and r.enabled = #{enabled}
    </select>

    <select id="selectRolesByUserAndRole" resultType="com.lin.model.SysRole">
        select
            r.id,
            r.role_name roleName,
            r.enabled,
            r.create_by createBy,
            r.create_time createTime
        from sys_user u
                 inner join sys_user_role ur on u.id = ur.user_id
                 inner join sys_role r on ur.role_id = r.id
        where u.id = #{user.id} and r.enabled = #{role.enabled}
    </select>

    <!--property != null所有属性都可以使用，property != ''只有字符串可以使用，条件间的连接符使用and或or-->
    <!--where标签可以替代where 1 = 1语句的作用-->
    <!--使用bind标签声明语句变量，可用该变量替换and user_name like concat('%', #{userName}, '%')-->
    <!--使用bind标签可以解决不同数据库函数参数不一致的情况-->
    <!--_databaseId用来识别当前数据库的类型-->
    <select id="selectByUser" resultType="com.lin.model.SysUser">
        select
           id,
           user_name userName,
           user_password userPassword,
           user_email userEmail,
           user_info userInfo,
           head_img headImg,
           create_time createTime
        from sys_user
        <where>
            <if test="userName != null and userName != ''">
                <!--此处的根据_databaseId识别mysql数据库失败，不知为何-->
                <!--<if test="_databaseId == 'mysql'">-->
                    <!--and user_name like concat('%', #{userName}, '%')-->
                <!--</if>-->
                <!--<if test="_databaseId == 'oracle'">-->
                    <!--and user_name like '%'||#{userName}||'%'-->
                <!--</if>-->
                <bind name="userNameLike" value="'%' + userName + '%'" />
                and user_name like #{userNameLike}
            </if>
            <if test="userEmail != null and userEmail != ''">
                and user_email = #{userEmail}
            </if>
        </where>
    </select>

    <!--指定databaseId可以针对不同的数据库编写不同的语句，有databaseId的标签优先级比没有databaseId的级别要高-->
    <!--<select id="selectByUser" databaseId="mysql">-->
        <!--select *-->
        <!--from sys_user-->
        <!--where user_name like concat('%', #{userName}, '%')-->
    <!--</select>-->

    <!--为Oracle指定该方法的实现语句-->
    <!--<select id="selectByUser" databaseId="oracle">-->
        <!--select *-->
        <!--from sys_user-->
        <!--where user_name like '%'||#{userName}||'%'-->
    <!--</select>-->

    <!--set标签可以自动把最后的多余逗号删除，最后加上id = #{id}，防止所有条件为null时出错-->
    <update id="updateByIdSelective">
        update sys_user
        <set>
            <if test="userName != null and userName !=''">
                user_name = #{userName},
            </if>
            <if test="userPassword != null and userPassword !=''">
                user_password = #{userPassword},
            </if>
            <if test="userEmail != null and userEmail !=''">
                user_email = #{userEmail},
            </if>
            <if test="userInfo != null and userInfo !=''">
                user_info = #{userInfo},
            </if>
            <if test="headImg != null">
                head_img = #{headImg, jdbcType=BLOB},
            </if>
            <if test="createTime != null">
                create_time = #{createTime, jdbcType=TIMESTAMP},
            </if>
            id = #{id},
        </set>
        where id = #{id}
    </update>

    <!--使用choose when otherwise标签可以进行动态选择要执行的语句-->
    <select id="selectByIdOrUserName" resultType="com.lin.model.SysUser">
        select
            id,
            user_name userName,
            user_password userPassword,
            user_email userEmail,
            user_info userInfo,
            head_img headImg,
            create_time createTime
        from sys_user
        where 1 = 1
        <choose>
            <when test="id != null">
                and id = #{id}
            </when>
            <when test="userName != null and userName != ''">
                and user_name = #{userName}
            </when>
            <otherwise>
                and 1 = 2
            </otherwise>
        </choose>
    </select>

    <!--这里的collections填的不是接口的参数名，List的话填list，数组的话填array-->
    <!--会自动把参数的值放到foreach中，不需要写方法的参数名-->
    <select id="selectByIdList" resultType="com.lin.model.SysUser">
        select id,
            user_name userName,
            user_password userPassword,
            user_email userEmail,
            user_info userInfo,
            head_img headImg,
            create_time createTime
        from sys_user
        where id in
        <foreach collection="list" open="(" close=")" separator="," item="id" index="i">
            #{id}
        </foreach>
    </select>

    <!--配置useGeneratedKeys为true，会把数据库的主键的值设置到keyProperty指定的id属性上-->
    <insert id="insertList" useGeneratedKeys="true" keyProperty="id">
        insert into sys_user(
             user_name, user_password, user_email, user_info, head_img, create_time)
        values
        <foreach collection="list" item="user" separator=",">
            (
              #{user.userName}, #{user.userPassword}, #{user.userEmail},
              #{user.userInfo}, #{user.headImg, jdbcType=BLOB},
              #{user.createTime, jdbcType=TIMESTAMP}
            )
        </foreach>
    </insert>

    <!--Mybatis上下文中默认使用了_parameter作为map参数的key，$号表示纯粹的字符串替换，#表示变量替换-->
    <update id="updateByMap">
        update sys_user
        set
        <foreach collection="_parameter" item="val" index="key" separator=",">
            ${key} = #{val}
        </foreach>
        where id = #{id}
    </update>

    <!--r.id "role.id"是把该字段赋值给类中的role属性的id字段-->
    <select id="selectUserAndRoleById" resultType="com.lin.model.SysUser">
        select
            u.id,
            u.user_name userName,
            u.user_password userPassword,
            u.user_email userEmail,
            u.user_info userInfo,
            u.head_img headImg,
            u.create_time createTime,
            r.id "role.id",
            r.role_name "role.roleName",
            r.enabled "role.enabled",
            r.create_by "role.createBy",
            r.create_time "role.createTime"
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
        where u.id = #{id}
    </select>

    <!--使用resultMap作为返回值，可以不写别名，因为role的id和create_time和user重名，所以需要重新命名-->
    <select id="selectUserAndRoleById2" resultMap="userRoleMap">
        select
            u.id,
            u.user_name,
            u.user_password,
            u.user_email,
            u.user_info,
            u.head_img,
            u.create_time,
            r.id role_id,
            r.role_name role_role_name,
            r.enabled role_enabled,
            r.create_by role_create_by,
            r.create_time role_create_time
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
        where u.id = #{id}
    </select>

    <!--这里只查出role_id的值，role的其他属性通过userRoleMapSelect的association中的select中指定的方法来查出-->
    <select id="selectUserAndRoleByIdSelect" resultMap="userRoleMapSelect">
        select
            u.id,
            u.user_name,
            u.user_password,
            u.user_email,
            u.user_info,
            u.head_img,
            u.create_time,
            ur.role_id
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        where u.id = #{id}
    </select>

</mapper>